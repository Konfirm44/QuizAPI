@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace;

@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
}
[Route("api/[controller]")]
[ApiController]
public class @Model.ControllerName : ControllerBase
{
    private readonly @Model.ContextTypeName _context;

    public @(Model.ControllerName)(@Model.ContextTypeName context)
    {
    _context = context;
    }

    // GET: @routePrefix
    [HttpGet]
    public async Task<ActionResult<IEnumerable<@(Model.ModelTypeName)>>> Get@(entitySetName)()
    {
        return await _context.@(entitySetName).ToListAsync();
    }

    // GET: @routePrefix/5
    [HttpGet("{id}")]
    public async Task<ActionResult<@(Model.ModelTypeName)>> Get@(Model.ModelTypeName)(@primaryKeyShortTypeName id)
    {
        return await _context.@(entitySetName).FindAsync(id)
            is @Model.ModelTypeName @Model.ModelVariable
                ? @Model.ModelVariable
                : NotFound();
    }

    // PUT: @routePrefix/5
    [HttpPut("{id}")]
    public async Task<IActionResult> Put@(Model.ModelTypeName)(@primaryKeyShortTypeName id, @Model.ModelTypeName @Model.ModelVariable)
    {
        if (id != @(Model.ModelVariable).@primaryKeyName)
        {
            return BadRequest();
        }

        var exists = await _context.@(entitySetName).AnyAsync(@(Model.ModelVariable[0]) => @(Model.ModelVariable[0]).@primaryKeyName == id);
        if (!exists)
        {
            return NotFound();
        }

        _context.Update(@Model.ModelVariable);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    // POST: @routePrefix
    [HttpPost]
    public async Task<ActionResult<@(Model.ModelTypeName)>> Post@(Model.ModelTypeName)(@Model.ModelTypeName @Model.ModelVariable)
    {
        _context.@(entitySetName).Add(@Model.ModelVariable);
@{
if (primaryKeyIsAutoGenerated)
{
        @:await _context.SaveChangesAsync();
}
else
{
        @:try
        @:{
            @:await _context.SaveChangesAsync();
        @:}
        @:catch (DbUpdateException)
        @:{
            @:if (@(Model.ModelTypeName)Exists(@(Model.ModelVariable).@primaryKeyName))
            @:{
                @:return Conflict();
            @:}
            @:else
            @:{
                @:throw;
            @:}
        @:}
}
}

        return CreatedAtAction(nameof(Get@(Model.ModelTypeName)), new { id = @(Model.ModelVariable).@primaryKeyName }, @Model.ModelVariable);
    }

    // DELETE: @routePrefix/5
    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete@(Model.ModelTypeName)(@primaryKeyShortTypeName id)
    {
        if (await _context.@(entitySetName).FindAsync(id) is @Model.ModelTypeName @Model.ModelVariable)
        {
            _context.@(entitySetName).Remove(@Model.ModelVariable);
            await _context.SaveChangesAsync();
            return NoContent();
        }

        return NotFound();
    }

}
